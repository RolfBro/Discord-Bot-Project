"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const stdlib_1 = __importDefault(require("@doctormckay/stdlib"));
const http_1 = require("@doctormckay/stdlib/http");
const crypto_1 = require("crypto");
const debug_1 = __importDefault(require("debug"));
const events_1 = __importDefault(require("events"));
const https_1 = __importDefault(require("https"));
const socks_proxy_agent_1 = require("socks-proxy-agent");
const steamid_1 = __importDefault(require("steamid"));
const AuthenticationClient_1 = __importDefault(require("./AuthenticationClient"));
const helpers_1 = require("./helpers");
const WebApiTransport_1 = __importDefault(require("./transports/WebApiTransport"));
const WebSocketCMTransport_1 = __importDefault(require("./transports/WebSocketCMTransport"));
const EAuthSessionGuardType_1 = __importDefault(require("./enums-steam/EAuthSessionGuardType"));
const EAuthTokenPlatformType_1 = __importDefault(require("./enums-steam/EAuthTokenPlatformType"));
const EResult_1 = __importDefault(require("./enums-steam/EResult"));
const ESessionPersistence_1 = __importDefault(require("./enums-steam/ESessionPersistence"));
const debug = (0, debug_1.default)('steam-session:LoginSession');
class LoginSession extends events_1.default {
    /**
     * @param {EAuthTokenPlatformType} platformType
     * @param {ConstructorOptions} [options]
     */
    constructor(platformType, options) {
        super();
        options = options || {};
        let agent = new https_1.default.Agent({ keepAlive: true });
        if (options.httpProxy && options.socksProxy) {
            throw new Error('Cannot specify both httpProxy and socksProxy at the same time');
        }
        if (options.httpProxy) {
            agent = stdlib_1.default.HTTP.getProxyAgent(true, options.httpProxy);
        }
        else if (options.socksProxy) {
            agent = new socks_proxy_agent_1.SocksProxyAgent(options.socksProxy);
        }
        this._webClient = new http_1.HttpClient({ httpsAgent: agent });
        this._platformType = platformType;
        let transport = options.transport;
        if (!transport) {
            switch (platformType) {
                case EAuthTokenPlatformType_1.default.SteamClient:
                    transport = new WebSocketCMTransport_1.default(this._webClient, agent);
                    break;
                default:
                    transport = new WebApiTransport_1.default(this._webClient);
            }
        }
        this._handler = new AuthenticationClient_1.default(this._platformType, transport, this._webClient);
        this._handler.on('debug', (...args) => this.emit('debug-handler', ...args));
        this.on('debug', debug);
        this.loginTimeout = 30000;
    }
    get loginTimeout() {
        return this._loginTimeout;
    }
    set loginTimeout(value) {
        if (this._pollingStartedTime) {
            throw new Error('Setting loginTimeout after polling has already started is ineffective');
        }
        this._loginTimeout = value;
    }
    get steamID() {
        // There's a few places we could get a steamid from
        if (this._startSessionResponse && this._startSessionResponse.steamId) {
            return new steamid_1.default(this._startSessionResponse.steamId);
        }
        else if (this.accessToken || this.refreshToken) {
            let token = this.accessToken || this.refreshToken;
            let decodedToken = (0, helpers_1.decodeJwt)(token);
            return new steamid_1.default(decodedToken.sub);
        }
        else {
            return null;
        }
    }
    get accountName() { return this._accountName; }
    get accessToken() { return this._accessToken; }
    set accessToken(token) {
        if (!token) {
            this._accessToken = token;
            return;
        }
        let decoded = (0, helpers_1.decodeJwt)(token);
        try {
            new steamid_1.default(decoded.sub);
        }
        catch {
            throw new Error('Not a valid Steam token');
        }
        let aud = decoded.aud || [];
        if (aud.includes('derive')) {
            throw new Error('The provided token is a refresh token, not an access token');
        }
        if (this._startSessionResponse
            && this._startSessionResponse.steamId
            && decoded.sub != this._startSessionResponse.steamId) {
            throw new Error('Token is for a different account. To work with a different account, create a new LoginSession.');
        }
        if (this._refreshToken) {
            let decodedRefreshToken = (0, helpers_1.decodeJwt)(this._refreshToken);
            if (decodedRefreshToken.sub != decoded.sub) {
                throw new Error('This access token belongs to a different account from the set refresh token.');
            }
        }
        // Everything checks out
        this._accessToken = token;
    }
    get refreshToken() { return this._refreshToken; }
    set refreshToken(token) {
        if (!token) {
            this._refreshToken = token;
            return;
        }
        let decoded = (0, helpers_1.decodeJwt)(token);
        try {
            new steamid_1.default(decoded.sub);
        }
        catch {
            throw new Error('Not a valid Steam token');
        }
        let aud = decoded.aud || [];
        if (!aud.includes('derive')) {
            throw new Error('The provided token is an access token, not a refresh token');
        }
        if (this._startSessionResponse
            && this._startSessionResponse.steamId
            && decoded.sub != this._startSessionResponse.steamId) {
            throw new Error('Token is for a different account. To work with a different account, create a new LoginSession.');
        }
        if (this._accessToken) {
            let decodedAccessToken = (0, helpers_1.decodeJwt)(this._accessToken);
            if (decodedAccessToken.sub != decoded.sub) {
                throw new Error('This refresh token belongs to a different account from the set access token.');
            }
        }
        // Everything checks out
        this._refreshToken = token;
    }
    get steamGuardMachineToken() { return this._steamGuardMachineToken; }
    get _defaultWebsiteId() {
        switch (this._platformType) {
            case EAuthTokenPlatformType_1.default.SteamClient:
                return 'Client';
            case EAuthTokenPlatformType_1.default.WebBrowser:
                return 'Community';
            case EAuthTokenPlatformType_1.default.MobileApp:
                return 'Mobile';
            default:
                return 'Community';
        }
    }
    _verifyStarted(mustHaveSteamId = false) {
        if (!this._startSessionResponse) {
            throw new Error('Login session has not been started yet');
        }
        if (this._pollingCanceled) {
            throw new Error('Login attempt has been canceled');
        }
        if (mustHaveSteamId && !this.steamID) {
            throw new Error('Cannot use this method with this login scheme');
        }
    }
    async startWithCredentials(details) {
        if (this._startSessionResponse) {
            throw new Error('A session has already been started on this LoginSession object. Create a new LoginSession to start a new session.');
        }
        this._hadRemoteInteraction = false;
        this._steamGuardCode = details.steamGuardCode;
        if (typeof details.steamGuardMachineToken == 'string') {
            this._steamGuardMachineToken = details.steamGuardMachineToken;
        }
        let encryptionResult = await this._handler.encryptPassword(details.accountName, details.password);
        this._startSessionResponse = await this._handler.startSessionWithCredentials({
            accountName: details.accountName,
            ...encryptionResult,
            persistence: details.persistence || ESessionPersistence_1.default.Persistent,
            platformType: this._platformType,
            // use a manually-specified token with priority over a token saved on this object
            steamGuardMachineToken: details.steamGuardMachineToken || this.steamGuardMachineToken
        });
        this.emit('debug', 'start session response', this._startSessionResponse);
        return await this._processStartSessionResponse();
    }
    async startWithQR() {
        if (this._startSessionResponse) {
            throw new Error('A session has already been started on this LoginSession object. Create a new LoginSession to start a new session.');
        }
        this._hadRemoteInteraction = false;
        this._startSessionResponse = await this._handler.startSessionWithQR({
            platformType: this._platformType
        });
        this.emit('debug', 'start qr session response', this._startSessionResponse);
        return await this._processStartSessionResponse();
    }
    async _processStartSessionResponse() {
        this._pollingCanceled = false;
        let validActions = [];
        for (let i of this._startSessionResponse.allowedConfirmations) {
            switch (i.type) {
                case EAuthSessionGuardType_1.default.None:
                    this.emit('debug', 'no guard required');
                    // Use setImmediate here so that the promise is resolved before we potentially emit a session
                    setImmediate(() => this._doPoll());
                    return { actionRequired: false };
                case EAuthSessionGuardType_1.default.EmailCode:
                case EAuthSessionGuardType_1.default.DeviceCode:
                    let codeType = i.type == EAuthSessionGuardType_1.default.EmailCode ? 'email' : 'device';
                    this.emit('debug', `${codeType} code required`);
                    let authResult = await (codeType == 'email' ? this._attemptEmailCodeAuth() : this._attemptTotpCodeAuth());
                    if (authResult) {
                        // We successfully authed already, no action needed
                        return { actionRequired: false };
                    }
                    else {
                        // We need a code from the user
                        let action = { type: i.type };
                        if (i.message) {
                            action.detail = i.message;
                        }
                        validActions.push(action);
                        break;
                    }
                case EAuthSessionGuardType_1.default.DeviceConfirmation:
                case EAuthSessionGuardType_1.default.EmailConfirmation:
                    this.emit('debug', 'device or email confirmation guard required');
                    validActions.push({ type: i.type });
                    setImmediate(() => this._doPoll());
                    break;
                case EAuthSessionGuardType_1.default.MachineToken:
                    // Do nothing here since this is handled by _attemptEmailCodeAuth
                    break;
                default:
                    let guardTypeString = i.type.toString();
                    for (let j in EAuthSessionGuardType_1.default) {
                        if (EAuthSessionGuardType_1.default[j] == guardTypeString) {
                            guardTypeString = j;
                            break;
                        }
                    }
                    throw new Error(`Unknown auth session guard type ${guardTypeString}`);
            }
        }
        // If we got here but we have no valid actions, something went wrong
        if (validActions.length == 0) {
            throw new Error('Login requires action, but we can\'t tell what kind of action is required');
        }
        let response = {
            actionRequired: true,
            validActions
        };
        if (this._startSessionResponse.challengeUrl) {
            let startSessionResponse = this._startSessionResponse;
            response.qrChallengeUrl = startSessionResponse.challengeUrl;
        }
        return response;
    }
    forcePoll() {
        this._verifyStarted();
        if (!this._pollingStartedTime) {
            throw new Error('Polling has not yet started');
        }
        this._doPoll();
    }
    async _doPoll() {
        if (this._pollingCanceled) {
            return;
        }
        // If we called _doPoll outside of an existing timer, cancel the timer
        clearTimeout(this._pollTimer);
        if (!this._pollingStartedTime) {
            this._pollingStartedTime = Date.now();
            this.emit('polling');
        }
        let totalPollingTime = Date.now() - this._pollingStartedTime;
        if (totalPollingTime >= this.loginTimeout) {
            this.emit('timeout');
            this.cancelLoginAttempt();
            return;
        }
        let pollResponse;
        try {
            pollResponse = await this._handler.pollLoginStatus(this._startSessionResponse);
            this.emit('debug', 'poll response', pollResponse);
        }
        catch (ex) {
            // If we got an error, but we've already canceled polling, just do nothing.
            if (!this._pollingCanceled) {
                this.emit('error', ex);
                this.cancelLoginAttempt();
            }
            return;
        }
        this._startSessionResponse.clientId = pollResponse.newClientId || this._startSessionResponse.clientId;
        if (pollResponse.hadRemoteInteraction && !this._hadRemoteInteraction) {
            this._hadRemoteInteraction = true;
            this.emit('remoteInteraction');
        }
        if (pollResponse.newSteamGuardMachineAuth) {
            this._steamGuardMachineToken = pollResponse.newSteamGuardMachineAuth;
            this.emit('steamGuardMachineToken');
        }
        if (pollResponse.accessToken) {
            this._accountName = pollResponse.accountName;
            this.accessToken = pollResponse.accessToken;
            this.refreshToken = pollResponse.refreshToken;
            this.emit('authenticated');
            this.cancelLoginAttempt();
        }
        else if (!this._pollingCanceled) {
            this._pollTimer = setTimeout(() => this._doPoll(), this._startSessionResponse.pollInterval * 1000);
        }
    }
    /**
     * @returns {boolean} - true if code submitted successfully, false if code wasn't valid or no code available
     */
    async _attemptEmailCodeAuth() {
        if (this._steamGuardCode) {
            try {
                await this.submitSteamGuardCode(this._steamGuardCode);
                return true;
            }
            catch (ex) {
                if (ex.eresult != EResult_1.default.InvalidLoginAuthCode) {
                    // this is some kind of important error
                    throw ex;
                }
            }
        }
        // Can we use a machine auth token?
        if (this._platformType == EAuthTokenPlatformType_1.default.WebBrowser
            && this._startSessionResponse.allowedConfirmations.some(c => c.type == EAuthSessionGuardType_1.default.MachineToken)) {
            let result = await this._handler.checkMachineAuthOrSendCodeEmail({
                machineAuthToken: this.steamGuardMachineToken,
                ...this._startSessionResponse
            });
            this.emit('debug', `machine auth check response: ${EResult_1.default[result.result]}`);
            if (result.result == EResult_1.default.OK) {
                // Machine auth succeeded
                setImmediate(() => this._doPoll());
                return true;
            }
        }
        // An email was sent
        return false;
    }
    async _attemptTotpCodeAuth() {
        if (this._steamGuardCode) {
            try {
                await this.submitSteamGuardCode(this._steamGuardCode);
                return true; // submitting code succeeded
            }
            catch (ex) {
                if (ex.eresult != EResult_1.default.TwoFactorCodeMismatch) {
                    // this is some kind of important error
                    throw ex;
                }
            }
        }
        // If we got here, then we need the user to supply a code
        return false;
    }
    async submitSteamGuardCode(authCode) {
        this._verifyStarted(true);
        this.emit('debug', 'submitting steam guard code', authCode);
        let needsEmailCode = this._startSessionResponse.allowedConfirmations.some(c => c.type == EAuthSessionGuardType_1.default.EmailCode);
        let needsTotpCode = this._startSessionResponse.allowedConfirmations.some(c => c.type == EAuthSessionGuardType_1.default.DeviceCode);
        if (!needsEmailCode && !needsTotpCode) {
            throw new Error('No Steam Guard code is needed for this login attempt');
        }
        await this._handler.submitSteamGuardCode({
            ...this._startSessionResponse,
            authCode,
            authCodeType: needsEmailCode ? EAuthSessionGuardType_1.default.EmailCode : EAuthSessionGuardType_1.default.DeviceCode
        });
        setImmediate(() => this._doPoll());
    }
    cancelLoginAttempt() {
        this._pollingCanceled = true;
        this._handler.close();
        if (this._pollTimer) {
            clearTimeout(this._pollTimer);
            return true;
        }
        return false;
    }
    async getWebCookies() {
        if (!this.refreshToken) {
            throw new Error('A refresh token is required to get web cookies');
        }
        let body = {
            nonce: this.refreshToken,
            sessionid: (0, crypto_1.randomBytes)(12).toString('hex'),
            redir: 'https://steamcommunity.com/login/home/?goto='
        };
        debug('POST https://login.steampowered.com/jwt/finalizelogin %o', body);
        let finalizeResponse = await this._webClient.request({
            method: 'POST',
            url: 'https://login.steampowered.com/jwt/finalizelogin',
            headers: helpers_1.API_HEADERS,
            multipartForm: http_1.HttpClient.simpleObjectToMultipartForm(body)
        });
        if (finalizeResponse.jsonBody && finalizeResponse.jsonBody.error) {
            throw (0, helpers_1.eresultError)(finalizeResponse.jsonBody.error);
        }
        if (!finalizeResponse.jsonBody || !finalizeResponse.jsonBody.transfer_info) {
            let err = new Error('Malformed login response');
            err.responseBody = finalizeResponse.jsonBody;
            throw err;
        }
        // Now we want to execute all transfers specified in the finalizelogin response. Technically we only need one
        // successful transfer (hence the usage of promsieAny), but we execute them all for robustness in case one fails.
        // As long as one succeeds, we're good.
        let transfers = finalizeResponse.jsonBody.transfer_info.map(({ url, params }) => new Promise(async (resolve, reject) => {
            let body = { steamID: this.steamID.getSteamID64(), ...params };
            debug('POST %s %o', url, body);
            let result = await this._webClient.request({
                method: 'POST',
                url,
                multipartForm: http_1.HttpClient.simpleObjectToMultipartForm(body)
            });
            if (!result.headers || !result.headers['set-cookie'] || result.headers['set-cookie'].length == 0) {
                return reject(new Error('No Set-Cookie header in result'));
            }
            if (!result.headers['set-cookie'].some(c => c.startsWith('steamLoginSecure='))) {
                return reject(new Error('No steamLoginSecure cookie in result'));
            }
            resolve(result.headers['set-cookie'].map(c => c.split(';')[0].trim()));
        }));
        return await promiseAny(transfers);
    }
    async refreshAccessToken() {
        if (!this.refreshToken) {
            throw new Error('A refresh token is required to get a new access token');
        }
        this.accessToken = await this._handler.generateAccessTokenForApp(this.refreshToken);
    }
}
exports.default = LoginSession;
/**
 * @param {Promise[]} promises
 * @returns {Promise}
 */
function promiseAny(promises) {
    // for node <15 compat
    return new Promise((resolve, reject) => {
        let pendingPromises = promises.length;
        let rejections = [];
        promises.forEach((promise) => {
            promise.then((result) => {
                pendingPromises--;
                resolve(result);
            }).catch((err) => {
                pendingPromises--;
                rejections.push(err);
                if (pendingPromises == 0) {
                    reject(rejections[0]);
                }
            });
        });
    });
}
//# sourceMappingURL=data:application/json;base64,