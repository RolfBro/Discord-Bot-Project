"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _HttpClient_instances, _HttpClient_httpAgent, _HttpClient_httpsAgent, _HttpClient_localAddress, _HttpClient_defaultHeaders, _HttpClient_gzip, _HttpClient_decodeRequestOptions;
Object.defineProperty(exports, "__esModule", { value: true });
exports.preProcessOptions = void 0;
const events_1 = require("events");
const http_1 = require("http");
const https_1 = require("https");
const querystring_1 = require("querystring");
const zlib_1 = require("zlib");
const objects_1 = require("../../../objects");
const CookieJar_1 = __importDefault(require("./CookieJar"));
const crypto_1 = require("crypto");
const BODY_TYPES = ['body', 'urlEncodedForm', 'multipartForm', 'json'];
const METHODS_WITHOUT_BODY = ['GET', 'HEAD', 'OPTIONS', 'TRACE'];
const UTF8_PARSEABLE_CONTENT_TYPES = [
    // text/* is always considered parseable
    'application/json',
    'application/x-www-form-urlencoded',
    'application/xml',
    'application/xhtml+xml',
    'message/http' // for TRACE responses
];
const REDIRECT_STATUS_CODES = [301, 302, 303, 307, 308];
class HttpClient extends events_1.EventEmitter {
    constructor(options) {
        super();
        _HttpClient_instances.add(this);
        _HttpClient_httpAgent.set(this, void 0);
        _HttpClient_httpsAgent.set(this, void 0);
        _HttpClient_localAddress.set(this, void 0);
        _HttpClient_defaultHeaders.set(this, void 0);
        _HttpClient_gzip.set(this, void 0);
        options = options || {};
        __classPrivateFieldSet(this, _HttpClient_httpAgent, options.httpAgent || new http_1.Agent({ keepAlive: true }), "f");
        __classPrivateFieldSet(this, _HttpClient_httpsAgent, options.httpsAgent || new https_1.Agent({ keepAlive: true }), "f");
        __classPrivateFieldSet(this, _HttpClient_localAddress, options.localAddress, "f");
        __classPrivateFieldSet(this, _HttpClient_defaultHeaders, options.defaultHeaders || {}, "f");
        __classPrivateFieldSet(this, _HttpClient_gzip, options.gzip !== false, "f");
        if (options.cookieJar) {
            this.cookieJar = options.cookieJar === true ? new CookieJar_1.default() : options.cookieJar;
        }
    }
    request(options) {
        return new Promise((resolve, reject) => {
            options = preProcessOptions(options);
            createRequestBody(options);
            let nodeOptions = __classPrivateFieldGet(this, _HttpClient_instances, "m", _HttpClient_decodeRequestOptions).call(this, options);
            let reqFunc = nodeOptions.protocol == 'http:' ? http_1.request : https_1.request;
            this.emit('debug', 'request', `${nodeOptions.method} ${buildUrl(nodeOptions)}`, nodeOptions.headers);
            let req = reqFunc(nodeOptions, (res) => {
                let bodyChunks = [];
                let responseStream = res;
                if (res.headers['content-encoding'] == 'gzip') {
                    this.emit('debug', 'decompressing gzipped response');
                    let gzipStream = (0, zlib_1.createGunzip)();
                    responseStream.pipe(gzipStream);
                    responseStream = gzipStream;
                }
                responseStream.on('data', chunk => bodyChunks.push(chunk));
                responseStream.on('end', () => {
                    let response = {
                        statusCode: res.statusCode,
                        statusMessage: res.statusMessage,
                        url: buildUrl(nodeOptions),
                        headers: res.headers,
                        rawBody: Buffer.concat(bodyChunks)
                    };
                    this.emit('debug', 'response', `${nodeOptions.method} ${buildUrl(nodeOptions)} ${res.statusCode} ${res.statusMessage} ${res.headers['content-type']}`);
                    if (this.cookieJar) {
                        let setCookieHeader = response.headers['set-cookie'] || [];
                        if (!Array.isArray(setCookieHeader)) {
                            setCookieHeader = [setCookieHeader];
                        }
                        setCookieHeader.forEach((setCookie) => {
                            this.cookieJar.add(setCookie, nodeOptions.host);
                        });
                    }
                    let contentType = (res.headers['content-type'] || '').split(';')[0].trim();
                    if (contentType.startsWith('text/') || UTF8_PARSEABLE_CONTENT_TYPES.includes(contentType)) {
                        response.textBody = response.rawBody.toString('utf8');
                    }
                    if (contentType == 'application/json') {
                        try {
                            response.jsonBody = JSON.parse(response.textBody);
                        }
                        catch (ex) {
                            // don't care
                        }
                    }
                    if (options.followRedirects && REDIRECT_STATUS_CODES.includes(res.statusCode) && res.headers.location) {
                        let newRequest = (0, objects_1.clone)(options);
                        if ([301, 302, 303].includes(res.statusCode)) {
                            // Change the method to GET
                            newRequest.method = 'GET';
                            newRequest.url = res.headers.location;
                            delete newRequest.body;
                            delete newRequest.headers['content-type'];
                            delete newRequest.headers['content-length'];
                            this.request(newRequest).then(resolve).catch(reject);
                            return;
                        }
                    }
                    resolve(response);
                });
                res.on('error', reject);
            });
            req.end(options.body);
            req.on('error', reject);
        });
    }
    static simpleObjectToMultipartForm(obj) {
        let multipartForm = {};
        for (let i in obj) {
            multipartForm[i] = { content: obj[i] };
        }
        return multipartForm;
    }
}
exports.default = HttpClient;
_HttpClient_httpAgent = new WeakMap(), _HttpClient_httpsAgent = new WeakMap(), _HttpClient_localAddress = new WeakMap(), _HttpClient_defaultHeaders = new WeakMap(), _HttpClient_gzip = new WeakMap(), _HttpClient_instances = new WeakSet(), _HttpClient_decodeRequestOptions = function _HttpClient_decodeRequestOptions(options) {
    let nodeOptions = {};
    let url = new URL(options.url);
    let queryString = url.search;
    if (options.queryString) {
        if (queryString.length == 0) {
            queryString += '?';
        }
        if (!queryString.endsWith('?')) {
            // If the final character of our query string isn't "?", then we need to append a "&" to separate our new
            // options from existing options.
            queryString += '&';
        }
        queryString += (0, querystring_1.stringify)(options.queryString);
    }
    nodeOptions.protocol = url.protocol;
    nodeOptions.host = url.hostname;
    nodeOptions.port = getPort(url.port, url.protocol);
    nodeOptions.path = url.pathname + queryString;
    nodeOptions.method = options.method;
    nodeOptions.agent = url.protocol == 'http:' ? __classPrivateFieldGet(this, _HttpClient_httpAgent, "f") : __classPrivateFieldGet(this, _HttpClient_httpsAgent, "f");
    nodeOptions.localAddress = __classPrivateFieldGet(this, _HttpClient_localAddress, "f");
    nodeOptions.headers = { ...__classPrivateFieldGet(this, _HttpClient_defaultHeaders, "f"), ...(options.headers || {}) };
    if (this.cookieJar) {
        let cookieHeaderValue = this.cookieJar.getCookieHeaderForUrl(options.url);
        if (cookieHeaderValue.length > 0) {
            let existingCookieHeader = options.headers.cookie;
            nodeOptions.headers.cookie = (existingCookieHeader ? `${existingCookieHeader}; ` : '') + cookieHeaderValue;
        }
    }
    if (__classPrivateFieldGet(this, _HttpClient_gzip, "f")) {
        nodeOptions.headers['accept-encoding'] = 'gzip';
    }
    return nodeOptions;
};
function getPort(portStr, protocol) {
    let port = parseInt(portStr);
    if (isNaN(port) || port == 0) {
        return protocol == 'http:' ? 80 : 443;
    }
    return port;
}
function preProcessOptions(options) {
    // deep-clone the object so we don't cause any problems with implementation code
    options = (0, objects_1.clone)(options);
    options.method = options.method.toUpperCase();
    options.headers = options.headers || {};
    // lowercase all the header names
    let normalizedHeaders = {};
    for (let i in options.headers) {
        let nameLower = i.toLowerCase();
        if (normalizedHeaders[nameLower]) {
            throw new Error(`Header "${nameLower}" appears in the headers object multiple times, with different capitalization`);
        }
        normalizedHeaders[nameLower] = options.headers[i];
    }
    options.headers = normalizedHeaders;
    // Only 1 body type may be specified. If more than 1 is present, that's an error.
    if (BODY_TYPES.filter(bt => typeof options[bt] != 'undefined').length > 1) {
        throw new Error('Multiple body types were specified. Only 1 of body, urlEncodedForm, multipartForm, json may be specified');
    }
    return options;
}
exports.preProcessOptions = preProcessOptions;
function createRequestBody(options) {
    let bodyBuffer = Buffer.alloc(0);
    if (options.body) {
        bodyBuffer = Buffer.isBuffer(options.body) ? options.body : Buffer.from(options.body, 'utf8');
    }
    if (options.urlEncodedForm) {
        bodyBuffer = Buffer.from((0, querystring_1.stringify)(options.urlEncodedForm), 'utf8');
        options.headers['content-type'] = 'application/x-www-form-urlencoded';
    }
    if (options.json) {
        bodyBuffer = Buffer.from(JSON.stringify(options.json), 'utf8');
        options.headers['content-type'] = 'application/json';
    }
    if (options.multipartForm) {
        let boundary = '-----------------------------' + (0, crypto_1.randomBytes)(20).toString('hex');
        options.headers['content-type'] = `multipart/form-data; boundary=${boundary}`;
        let encodedBodyParts = [];
        for (let i in options.multipartForm) {
            let formObject = options.multipartForm[i];
            let head = `--${boundary}\r\nContent-Disposition: form-data; name="${i}"` +
                (formObject.filename ? `; filename="${formObject.filename}"` : '') +
                (formObject.contentType ? `\r\nContent-Type: ${formObject.contentType}` : '') +
                '\r\n\r\n';
            let tail = '\r\n';
            encodedBodyParts = encodedBodyParts.concat([
                Buffer.from(head, 'utf8'),
                Buffer.isBuffer(formObject.content) ? formObject.content : Buffer.from(formObject.content, 'utf8'),
                Buffer.from(tail, 'utf8')
            ]);
        }
        encodedBodyParts.push(Buffer.from(`--${boundary}--\r\n`, 'utf8'));
        bodyBuffer = Buffer.concat(encodedBodyParts);
    }
    if (METHODS_WITHOUT_BODY.includes(options.method)) {
        if (bodyBuffer.length > 0) {
            throw new Error(`Requests with method "${options.method} may not have a request body`);
        }
        delete options.headers['content-type'];
        delete options.headers['content-length'];
        return;
    }
    delete options.urlEncodedForm;
    delete options.json;
    delete options.multipartForm;
    options.body = bodyBuffer;
    options.headers['content-length'] = options.body.length;
}
function buildUrl(urlObj) {
    let portAppend = (urlObj.protocol == 'http:' && urlObj.port != 80) ||
        (urlObj.protocol == 'https:' && urlObj.port != 443);
    return `${urlObj.protocol}//${urlObj.host}${portAppend ? `:${urlObj.port}` : ''}${urlObj.path}`;
}
//# sourceMappingURL=data:application/json;base64,